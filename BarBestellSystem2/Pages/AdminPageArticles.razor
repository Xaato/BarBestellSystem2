@page "/AdminPage/Articles"
@inject IDbContextFactory<BarDbContext> DbFactory
@using Microsoft.EntityFrameworkCore
@using Auth0.AspNetCore.Authentication
@using System.Security.Claims
@using Application
@using Application.Models
@attribute [Authorize]


<ul class="nav nav-tabs">
  <li class="nav-item">
    <NavLink class="nav-link" href="/AdminPage/Tables" activeClass="active">Tische</NavLink>
  </li>
  <li class="nav-item">
    <NavLink class="nav-link" href="/AdminPage/Articles" activeClass="active">Artikel</NavLink>
  </li>
  <li class="nav-item">
    <NavLink class="nav-link" href="/AdminPage/Users" activeClass="active">Benutzer</NavLink>
  </li>
</ul>

<pageTitle>Admin - Artikelverwaltung</pageTitle>

<h2>Artikel</h2>
<div class="accordion">
  @foreach (ArticleGroup Category in Context.ArticleGroups.ToArray())
  {
    <div class="accordion-item">
      <h2>
        <button class="accordion-button @ActiveStates[Category][0]" type="button" data-bs-toggle="collapse"
          data-bs-target="#collapseOne" aria-expanded="@((ActiveStates[Category][1] == "show").ToString())"
          aria-controls="collapseOne" @onclick="@(e => SwitchState(Category))">
          <input id="@Category.Name-Name" value="@Category.Name" type="text" class="form-control" aria-label="Nummer"
          @oninput="@(ui => setGroupName(Category, ui))">
          <span class="input-group-text bg-danger" style="cursor: pointer;"
          @onclick="@(ui => deleteGroup(Category, ui))">🗑</span>
        </button>
      </h2>
      <div id="collapse@Category" class="accordion-collapse collapse @ActiveStates[Category][1]"
        aria-labelledby="headingOne" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <div class="list-group">
            @foreach (Article Item in Category.Articles.Where(item => Context.Entry(item).State !=
           EntityState.Deleted).ToArray())
            {
              <div class="input-group mb-5">
                <select id="@Category.Name-@Item.Name-Group" class="form-select" aria-label="Notes"
                @onchange="@(e => selectedGroupChanged(Item,e))">
                  @foreach (ArticleGroup lGr in Context.ArticleGroups.ToArray())
                  {
                    if (lGr.Id == Category.Id)
                    {
                      <option value="@lGr.Id" selected>@lGr.Name</option>
                    }
                    else
                    {
                      <option value="@lGr.Id">@lGr.Name</option>
                    }
                  }
                </select>
                <input id="@Category.Name-@Item.Name-Id" value="@Item.Number" type="text" class="form-control"
                  aria-label="Nummer" @oninput="@(ui => setNr(Item, ui))">
                <input id="@Category.Name-@Item.Name-Name" value="@Item.Name" type="text" class="form-control"
                  aria-label="Name" @oninput="@(ui => setName(Item, ui))">
                <input id="@Category.Name-@Item.Name-Price" value="@Item.Price.ToString("C")" type="text"
                  class="form-control" aria-label="Preis" @oninput="@(ui => setPrice(Item, ui))">
                <span class="input-group-text bg-danger" style="cursor: pointer;"
                @onclick="@(ui => deleteArticle(Item, ui))">🗑</span>
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  }
</div>
<br />
<button type="button" class="btn btn-success" @onclick="Save">Speichern</button>
<button type="button" class="btn btn-success" @onclick="AddArticle">Artikel Hinzufügen</button>
<button type="button" class="btn btn-success" @onclick="AddGroup">Gruppe Hinzufügen</button>
@code {
  private BarDbContext? Context { get; set; }

  string ActiveCategory = string.Empty;
  Dictionary<ArticleGroup, string[]> ActiveStates = new();

  protected override async Task OnInitializedAsync()
  {
    Context = await DbFactory.CreateDbContextAsync();

    foreach (ArticleGroup lCat in Context.ArticleGroups.Include(item => item.Articles).ToArray())
    {
      if (!ActiveStates.Keys.Contains(lCat))
        ActiveStates.Add(lCat, ["", "collapsed"]);
    }
  }
  public void Dispose() => Context?.Dispose();

  //Accordion manual collapse logic because screw JS
  private void SwitchState(ArticleGroup Category)
  {
    foreach (ArticleGroup lCategory in ActiveStates.Keys)
    {
      bool lState = false;
      if (Category == lCategory)
        lState = !string.Equals(ActiveStates[lCategory][1], "show");
      ActiveStates[lCategory][0] = lState ? null : "collapsed";
      ActiveStates[lCategory][1] = lState ? "show" : null;
    }
    StateHasChanged();
  }
  //change group of article
  public void selectedGroupChanged(Article article, ChangeEventArgs args)
  {
    article.ArticleGroup = Context.ArticleGroups.FirstOrDefault(item => item.Id == int.Parse(args.Value.ToString()));
  }
  //Adjust number if it parses
  public void setNr(Article article, ChangeEventArgs args)
  {
    if (int.TryParse(args.Value.ToString(), out int nr))
    {
      if (Context.Articles.Any(item => item.Number == nr))
      {
        //Do something?
        return;
      }
      else
      {
        article.Number = nr;
      }
    }
  }
  //adjust name
  public void setName(Article article, ChangeEventArgs args)
  {
    //sanitize?
    article.Name = args.Value.ToString();
  }
  //Adjust price
  public void setPrice(Article article, ChangeEventArgs args)
  {
    if (decimal.TryParse(args.Value.ToString(), out decimal dec))
      article.Price = dec;
  }
  public void setGroupName(ArticleGroup group, ChangeEventArgs args)
  {
    group.Name = args.Value.ToString();
  }
  //mark article for deletion
  public void deleteArticle(Article article, MouseEventArgs args)
  {
    Context.Articles.Remove(article);
    StateHasChanged();
  }
  //commit changes to DB
  public void Save()
  {
    Context.SaveChanges();
  }
  public void AddArticle()
  {
    Context.Articles.Update(new()
      {
        Name = string.Empty,
        ArticleGroup = ActiveStates.FirstOrDefault(item => item.Value[0] == null).Key ?? Context.ArticleGroups.FirstOrDefault()
      });
  }
  public void AddGroup()
  {
    ArticleGroup lCat = new()
      {
        Name = string.Empty,
        Articles = new List<Article>()
      };
    ActiveStates.Add(lCat, ["", "collapsed"]);
    Context.ArticleGroups.Update(lCat);
    StateHasChanged();
  }
  public void deleteGroup(ArticleGroup group, MouseEventArgs args)
  {
    foreach (Article art in Context.Articles.Where(item => item.ArticleGroup == group))
    {
      Context.Remove(art);
    }
    Context.Remove(group);
    ActiveStates.Remove(group);
    StateHasChanged();
  }
}

