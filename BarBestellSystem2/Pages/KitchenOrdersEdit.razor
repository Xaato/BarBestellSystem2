@page "/kitchen/ordersoverview"
@using Application
@using Application.Models
@attribute [Authorize]
<h3>Küche - Bestellübersicht</h3>
@foreach (var order in Orders)
{
    <Card>
        <CardBody>
            <CardTitle>
                Bestellnummer: @order.Id | Tisch: @order.TableId
            </CardTitle>
            <div class="accordion-body">
                <div class="list-group">
                    @foreach (var orderArticle in order.OrderArticles)
                    {
                        <div class="order-article">
                            <p>
                                @orderArticle.Article.Name @orderArticle.Amount x
                            </p>
                            <Switch Label="Fertig?" Disabled="Loading"
                                    Value="orderArticle.IsCompleted"
                                    ValueExpression="() => orderArticle.IsCompleted"
                                    ValueChanged="@(value => SwitchChanged(value, orderArticle, order))"/>
                        </div>
                    }
                </div>
            </div>
        </CardBody>
    </Card>
}


@code {

    [Inject] private BarService BarService { get; set; } = null!;
    private List<Order> Orders { get; set; } = [];
    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadOrdersAsync()
    {
        if (Loading)
        {
            return;
        }

        Loading = true;
        try
        {
            Orders = await BarService.LoadOrdersAsync();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task SwitchChanged(bool value, OrderArticle orderArticle, Order order)
    {
        orderArticle.IsCompleted = value;

        Loading = true;
        try
        {
            await BarService.UpdateOrderArticleAsync(orderArticle);
            if (order.OrderArticles.All(oa => oa.IsCompleted))
            {
                order.IsCompleted = true;
                await BarService.UpdateOrderAsync(order);
            }
        }
        finally
        {
            Loading = false;
        }

        await LoadOrdersAsync();
        StateHasChanged();
    }

}