@using Application.Models
@using Microsoft.EntityFrameworkCore
@using Auth0.AspNetCore.Authentication;
@attribute [Authorize]
@inject Application.BarDbContext Context
@page "/ordering/{Table}"

<PageTitle>Order</PageTitle>

<h1>Order</h1>

<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingOne">
      <button class="accordion-button @(CartOpen ? null : "collapsed")" type="button" data-bs-toggle="collapse"
        data-bs-target="#collapseOne" aria-expanded="@CartOpen.ToString()" aria-controls="collapseOne"
        @onclick="@(e => {CartOpen = !CartOpen;})">
        Cart (@Username)
      </button>
    </h2>
    <div id="collapseOne" class="accordion-collapse collapse @(CartOpen ? "show" : null)" aria-labelledby="headingOne"
      data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <div class="list-group">
          @foreach (var Item in Cart)
          {
            <button type="button" class="list-group-item list-group-item-action"
            @onclick="@(e => RemoveFromCart(Item.Key))">
              @Item.Key.ArticleGroup?.Name / @Item.Key.Name x @Item.Value
            </button>
          }
        </div>
        <div class="input-group mb-3">
          <span class="input-group-text">@Cart.Select(item => item.Key.Price * item.Value).Sum().ToString("C")</span>
          <button type="button" class="btn btn-success" @onclick="Order">Order</button>
        </div>
      </div>
    </div>
  </div>
</div>
<br />

<div class="accordion">
  @foreach (ArticleGroup Category in GetCategories())
  {
    <div class="accordion-item">
      <h2>
        <button class="accordion-button @ActiveStates[Category][0]" type="button" data-bs-toggle="collapse"
          data-bs-target="#collapseOne" aria-expanded="@((ActiveStates[Category][1] == "show").ToString())"
          aria-controls="collapseOne" @onclick="@(e => SwitchState(Category))">
          @Category.Name
        </button>
      </h2>
      <div id="collapse@Category" class="accordion-collapse collapse @ActiveStates[Category][1]"
        aria-labelledby="headingOne" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <div class="list-group">
            @foreach (Article Item in Category.Articles.ToArray())
            {
              <div class="input-group mb-4">
                <span class="input-group-text" @onclick="@(e => AddToCart(Item))">@Item.Id</span>
                <span class="input-group-text" @onclick="@(e => AddToCart(Item))">@Item.Name</span>
                <input id="@Category.Name-@Item.Name" type="text" class="form-control" aria-label="Notes" @oninput="@(ui => { 
                if(InputValues.ContainsKey(Item))
                  InputValues[Item] = ui.Value as string;
                else
                  InputValues.Add(Item, ui.Value as string);
                })">
                <span class="input-group-text bg-primary"
                @onclick="@(e => AddToCart(Item))">@Item.Price.ToString("C")</span>
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  }
</div>


@code {
  string ActiveCategory = string.Empty;
  Dictionary<ArticleGroup, string[]> ActiveStates = new();
  Dictionary<Article, string> InputValues = new();
  bool CartOpen = false;
  Dictionary<Article, int> Cart = new();
  [Parameter]
  public string? Table { get; set; }

  [CascadingParameter]
  public Task<AuthenticationState> AuthenticationStateTask { get; set; }

  private string Username = "";

  protected override async Task OnInitializedAsync()
  {
    if (AuthenticationStateTask is not null)
    {
      var state = await AuthenticationStateTask;

      Username = state?.User?.Identity?.Name ?? string.Empty;
    }
  }


  private ArticleGroup[] GetCategories()
  {
    if (ActiveStates.Keys.Count() == 0)
    {
      foreach (ArticleGroup lCat in Context.ArticleGroups.Include(item => item.Articles).ToArray())
      {
        ActiveStates.Add(lCat, ["", "collapsed"]);
      }
      @*
ActiveStates.Add(new ArticleGroup() { Name = "Nicht-alkoholisch", Articles = new List<Article>() }, ["", "collapsed"]);
ActiveStates.Add(new ArticleGroup() { Name = "Bier", Articles = new List<Article>() }, ["", "collapsed"]);
ActiveStates.Add(new ArticleGroup() { Name = "Wein", Articles = new List<Article>() }, ["", "collapsed"]);
foreach (ArticleGroup lCat in ActiveStates.Keys)
{
(lCat.Articles as List<Article>)?.Add(new Article() { Name = "Test1", ArticleGroup = lCat});
(lCat.Articles as List<Article>)?.Add(new Article() { Name = "Test2", ArticleGroup = lCat });
(lCat.Articles as List<Article>)?.Add(new Article() { Name = "Test3", ArticleGroup = lCat });
} *@
    }
    return ActiveStates.Keys.ToArray() ?? [];
  }
  private void SwitchState(ArticleGroup Category)
  {
    foreach (ArticleGroup lCategory in ActiveStates.Keys)
    {
      bool lState = false;
      if (Category == lCategory)
        lState = !string.Equals(ActiveStates[lCategory][1], "show");
      ActiveStates[lCategory][0] = lState ? null : "collapsed";
      ActiveStates[lCategory][1] = lState ? "show" : null;
    }
    StateHasChanged();
  }
  private void AddToCart(Article Article)
  {
    if (Cart.Keys.Contains(Article))
      Cart[Article]++;
    else
      Cart.Add(Article, 1);
  }
  private void RemoveFromCart(Article Article)
  {
    if (Cart.Keys.Contains(Article))
      if (Cart[Article] > 1)
        Cart[Article]--;
      else
        Cart.Remove(Article);
  }
  private void Order()
  {
    if (!int.TryParse(Table, out _))
      return;

    Order lOrder = Context.Orders.Add(new()
      {
        TableId = int.Parse(Table),
        Timestamp = DateTime.Now
      }).Entity;
    foreach (var lOrderPosition in Cart)
    {
      var OrderArt = Context.OrderArticles.Add(new()
        {
          Article = lOrderPosition.Key,
          Amount = lOrderPosition.Value,
          Order = lOrder
        }).Entity;
      if (InputValues.ContainsKey(OrderArt.Article))
        OrderArt.Notes = InputValues[OrderArt.Article];
      lOrder.Employee = Username;

    }
    Cart.Clear();
    Context.SaveChanges();
    CartOpen = false;
  }
}
