@using System.Security.Claims
@using Application
@using Application.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@implements IDisposable
@inject IDbContextFactory<BarDbContext> DbFactory
@page "/ordering/{Table}"

<PageTitle>Order</PageTitle>

<h1>Order</h1>

<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingOne">
      <button class="accordion-button @(CartOpen ? null : "collapsed")" type="button" data-bs-toggle="collapse"
        data-bs-target="#collapseOne" aria-expanded="@CartOpen.ToString()" aria-controls="collapseOne"
        @onclick="@(e => {CartOpen = !CartOpen;})">
        Cart (@Username)
      </button>
    </h2>
    <div id="collapseOne" class="accordion-collapse collapse @(CartOpen ? "show" : null)" aria-labelledby="headingOne"
      data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <div class="list-group">
          @foreach (var Item in Cart)
          {
            <button type="button" class="list-group-item list-group-item-action" @onclick="@(e => RemoveFromCart(Item))">
              @Item.Article.ArticleGroup?.Name / @Item.Article.Name @FormatNotes(Item) x @Item.Amount
            </button>
          }
        </div>
        <div class="input-group mb-3">
          <span class="input-group-text">@Cart.Select(item => item.Article.Price *
            item.Amount).Sum().ToString("C")</span>
          <button type="button" class="btn btn-success" @onclick="Order">Order</button>
        </div>
      </div>
    </div>
  </div>
</div>
<br />

<div class="accordion">
  @foreach (ArticleGroup Category in GetCategories())
  {
    <div class="accordion-item">
      <h2>
        <button class="accordion-button @ActiveStates[Category][0]" type="button" data-bs-toggle="collapse"
          data-bs-target="#collapseOne" aria-expanded="@((ActiveStates[Category][1] == "show").ToString())"
          aria-controls="collapseOne" @onclick="@(e => SwitchState(Category))">
          @Category.Name
        </button>
      </h2>
      <div id="collapse@Category" class="accordion-collapse collapse @ActiveStates[Category][1]"
        aria-labelledby="headingOne" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <div class="list-group">
            @foreach (Article Item in Category.Articles.ToArray())
            {
              <div class="input-group mb-4 @GetArticleCss(Item)">
                <span class="input-group-text" @onclick="@(e => AddToCart(Item, getInputString(Item)))">@Item.Number</span>
                <span class="input-group-text" @onclick="@(e => AddToCart(Item, getInputString(Item)))">@Item.Name</span>
                <input id="@Category.Name-@Item.Name" type="text" class="form-control" aria-label="Notes" @oninput="@(ui => { 
                if(InputValues.ContainsKey(Item))
                  InputValues[Item] = ui.Value as string;
                else
                  InputValues.Add(Item, ui.Value as string);
                })">
                <span class="input-group-text bg-primary"
                @onclick="@(e => AddToCart(Item, getInputString(Item)))">@Item.Price.ToString("C")</span>
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  }
</div>


@code {
  [CascadingParameter(Name = "test")] private HubConnection HubConnection { get; set; } = null!;
  private BarDbContext? Context { get; set; }
  string ActiveCategory = string.Empty;
  Dictionary<ArticleGroup, string[]> ActiveStates = new();
  Dictionary<Article, string> InputValues = new();
  Dictionary<Article, string> ArticleCss = new();
  bool CartOpen = false;
  List<CartItem> Cart = new();
  [Parameter]
  public string? Table { get; set; }

  [CascadingParameter]
  public Task<AuthenticationState> AuthenticationStateTask { get; set; }

  private string Username = "";
  private string UserId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (AuthenticationStateTask is not null)
    {
      var state = await AuthenticationStateTask;

      Username = state?.User?.Claims?.Where(item => item.Type.Equals(System.Security.Claims.ClaimTypes.GivenName))?.Select(c
      => c.Value).FirstOrDefault() ?? state?.User?.Identity?.Name ?? string.Empty;
      UserId = state?.User?.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
    }
    Context = await DbFactory.CreateDbContextAsync();
  }
  public void Dispose() => Context?.Dispose();
  //Get list of Article Categories
  private ArticleGroup[] GetCategories()
  {
    if (ActiveStates.Keys.Count() == 0)
    {
      foreach (ArticleGroup lCat in Context.ArticleGroups.Include(item => item.Articles).ToArray())
      {
        ActiveStates.Add(lCat, ["", "collapsed"]);
      }
    }
    return ActiveStates.Keys.ToArray() ?? [];
  }
  //Switch Accordion manually because screw JS
  private void SwitchState(ArticleGroup Category)
  {
    foreach (ArticleGroup lCategory in ActiveStates.Keys)
    {
      bool lState = false;
      if (Category == lCategory)
        lState = !string.Equals(ActiveStates[lCategory][1], "show");
      ActiveStates[lCategory][0] = lState ? null : "collapsed";
      ActiveStates[lCategory][1] = lState ? "show" : null;
    }
    StateHasChanged();
  }
  //Add Item to Cart
  private void AddToCart(Article Article, string Note)
  {
    CartItem lItem = Cart.FirstOrDefault(item => item.Article.Id == Article.Id && item.Notes == Note);
    if (lItem == null)
    {
      lItem = new CartItem() { Article = Article, Amount = 0, Notes = Note };
      Cart.Add(lItem);
    }
    lItem.Amount++;

    //highlight item for a bit as feedback
    if (ArticleCss.ContainsKey(Article))
      ArticleCss[Article] = "clicked";
    else
      ArticleCss.Add(Article, "clicked");

    if (InputValues.ContainsKey(Article))
      InputValues[Article] = string.Empty;

    StateHasChanged();

    //remove highlight after a moment
    Task lT = Task.Run(async delegate
    {
      await Task.Delay(200);
      if (ArticleCss.ContainsKey(Article))
        ArticleCss[Article] = string.Empty;
      InvokeAsync(StateHasChanged);
    });
  }
  //Remove item from cart
  private void RemoveFromCart(CartItem CartItem)
  {
    if (Cart.Contains(CartItem))
    {
      if (CartItem.Amount > 1)
        CartItem.Amount--;
      else
        Cart.Remove(CartItem);
    }
  }
  //take current orders and store to DB
  private void Order()
  {
    if (!int.TryParse(Table, out _))
      return;
    Order lOrder = Context.Orders.Add(new()
      {
        TableId = int.Parse(Table),
        Timestamp = DateTime.Now
      }).Entity;
    foreach (var lOrderPosition in Cart)
    {
      var OrderArt = Context.OrderArticles.Add(new()
        {
          Article = lOrderPosition.Article,
          Amount = lOrderPosition.Amount,
          Notes = lOrderPosition.Notes,
          Order = lOrder
        }).Entity;
      lOrder.Employee = UserId;
    }
    Cart.Clear();
    Context.SaveChanges();
    HubConnection.InvokeAsync("NewOrderPlaced");
    CartOpen = false;
  }
  //format notes for display in the cart
  private string FormatNotes(CartItem Artik)
  {
    if (Artik.Notes != string.Empty)
      return $"({Artik.Notes})";
    else
      return string.Empty;
  }
  //return Article rows css
  private string GetArticleCss(Article Artik)
  {
    if (ArticleCss.ContainsKey(Artik))
      return ArticleCss[Artik];
    else
      return string.Empty;
  }
  //Grab comment for order
  private string getInputString(Article Artik)
  {
    if (InputValues.ContainsKey(Artik))
      return InputValues[Artik];
    else
      return string.Empty;
  }

  public class CartItem
  {
    public Article Article { get; set; }
    public string Notes { get; set; }
    public int Amount { get; set; }
  }
}
