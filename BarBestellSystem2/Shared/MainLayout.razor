@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
<PageTitle>BarBestellSystem2</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="Logout">Logout</a>
        </div>
        <CascadingValue Value="_hubConnection" Name="test">
            <article class="content px-4">
                @Body
            </article>
        </CascadingValue>

    </main>
    <Toasts class="p-3" AutoHide="false" Delay="4000" Placement="ToastsPlacement.BottomRight"/>
</div>

@code
{
    public HubConnection? _hubConnection { get; set; }
    [Inject] protected ToastService ToastService { get; set; } = null!;

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public ClaimsPrincipal? User { get; set; }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        if (!User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Login");
        }
        // _hubConnection = new HubConnectionBuilder()
        //     .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"))
        //     .Build();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost/notificationHub")
            .Build();
        _hubConnection.On<string, string>("ReceiveNotification", (userId, message) =>
        {
            if (User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value == userId)
            {
                InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Success, message)));
            }
        });

        await _hubConnection.StartAsync();
    }
}